{"version":3,"sources":["webpack:///./src/pages/publications.js","webpack:///./src/components/publication-card.js"],"names":["data","locale","pageContext","nodes","allMarkdownRemark","edges","map","e","node","localizedNodes","getLocalizedNodes","defaultLocale","groupedByYear","groupBy","frontmatter","year","years","Object","keys","sort","reverse","title","formatMessage","useIntl","id","className","key","query","PublicationCard","useState","isAbstractVisible","setAbstractVisibility","tag","dangerouslySetInnerHTML","__html","journal","html","onClick","to","fields","slug","data-click-area","cn"],"mappings":"gPAYe,sBAAwC,IAArCA,EAAoC,EAApCA,KAAqBC,EAAe,EAA9BC,YAAeD,OAC/BE,EAAQH,EAAKI,kBAAkBC,MAAMC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,QAChDC,EAAiBC,YAAkBP,EAAOF,EAAQU,iBAElDC,EAAgBC,kBAAQJ,GAAgB,SAAAF,GAAC,OAAIA,EAAEO,YAAYC,QAC3DC,EAAQC,OAAOC,KAAKN,GAAeO,OAAOC,UAG1CC,GAAQC,EADYC,cAAlBD,eACoB,CAAEE,GAAI,uBAElC,OACE,kBAAC,IAAD,CAAQH,MAAOA,GACb,iCACE,4BAAKA,GACL,yBAAKI,UAAU,gBACZT,EAAMV,KACL,SAAAS,GAAI,OACF,6BAASU,UAAU,wBAAwBC,IAAKX,GAC9C,wBAAIU,UAAU,sBAAsBV,GACnCH,EAAcG,GAAMT,KACnB,SAAAE,GAAI,OAEA,kBAAC,IAAD,CAAiBA,KAAMA,EAAMkB,IAAKlB,EAAKgB,gBAYtD,IAAMG,EAAK,a,iCC9ClB,0GAQaC,EAAkB,SAAC,GAAc,IAAZpB,EAAW,EAAXA,KAAW,EACQqB,oBAAS,GAArDC,EADoC,KACjBC,EADiB,KAO3C,OACE,kBAAC,IAAD,CACEC,IAAI,UACJP,UAAU,qDAEV,wBAAIA,UAAU,2BACZ,0BAAMQ,wBAAyB,CAAEC,OAAQ1B,EAAKM,YAAYO,UAE5D,6BAAMb,EAAKM,YAAYqB,SACvB,yBAAKV,UAAU,6BAETjB,EAAK4B,MACP,4BAAQX,UAAU,qCAChBY,QAjBuB,WAC/BN,GAAuBD,KAkBf,kBAAC,IAAD,CAAkBN,GAAG,qBAGzB,kBAAC,IAAD,CAAMC,UAAU,yBAAyBa,GAAI9B,EAAK+B,OAAOC,KAAMC,mBAAA,GAC7D,kBAAC,IAAD,CAAkBjB,GAAG,0BAGzB,2BACEC,UAAWiB,IAAG,6BAA8B,CAAE,sCAAuCZ,IACrFG,wBAAyB,CAAEC,OAAQ1B,EAAK4B","file":"component---src-pages-publications-js-3b3bc524fb5641ba2fb1.js","sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { useIntl } from \"react-intl\"\n\nimport { Layout } from \"../components/layout\"\nimport { PublicationCard } from \"../components/publication-card\"\nimport { groupBy } from \"../utils/group-by\"\nimport { getLocalizedNodes } from \"../intl/utils\"\nimport { defaultLocale } from \"../intl/locales\"\n\nimport \"./publications.scss\"\n\nexport default ({ data, pageContext: { locale } }) => {\n  const nodes = data.allMarkdownRemark.edges.map(e => e.node)\n  const localizedNodes = getLocalizedNodes(nodes, locale, defaultLocale)\n\n  const groupedByYear = groupBy(localizedNodes, e => e.frontmatter.year)\n  const years = Object.keys(groupedByYear).sort().reverse()\n\n  const { formatMessage } = useIntl()\n  const title = formatMessage({ id: \"pages.publications\" })\n\n  return (\n    <Layout title={title}>\n      <section>\n        <h1>{title}</h1>\n        <div className=\"publications\">\n          {years.map(\n            year => (\n              <section className=\"publications__section\" key={year}>\n                <h2 className=\"publications__year\">{year}</h2>\n                {groupedByYear[year].map(\n                  node =>\n                    (\n                      <PublicationCard node={node} key={node.id} />\n                    ),\n                )}\n              </section>\n            ),\n          )}\n        </div>\n      </section>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n    query {\n        allMarkdownRemark(filter: {fields: {type: {eq: \"publications\"}}}){\n            totalCount\n            edges {\n                node {\n                    id\n                    html\n                    frontmatter {\n                        title\n                        journal\n                        year\n                    }\n                    fields {\n                        slug\n                        locale\n                    }\n                }\n            }\n        }\n    }\n`\n","import React, { useState } from \"react\"\nimport cn from \"classnames\"\nimport { FormattedMessage } from \"react-intl\"\nimport { Link } from \"../intl/link\"\n\nimport \"./publication-card.scss\"\nimport { ClickableArea } from \"./clickable-area\"\n\nexport const PublicationCard = ({ node }) => {\n  const [isAbstractVisible, setAbstractVisibility] = useState(false)\n\n  const toggleAbstractVisibility = () => {\n    setAbstractVisibility(!isAbstractVisible)\n  }\n\n  return (\n    <ClickableArea\n      tag=\"article\"\n      className=\"publication-card card card--left card--with-hover\"\n    >\n      <h3 className=\"publication-card__title\">\n        <span dangerouslySetInnerHTML={{ __html: node.frontmatter.title }} />\n      </h3>\n      <div>{node.frontmatter.journal}</div>\n      <nav className=\"publication-card__links\">\n        {\n          !!node.html &&\n          <button className=\"link-button publication-card__link\"\n            onClick={toggleAbstractVisibility}\n          >\n            <FormattedMessage id=\"common.abstract\" />\n          </button>\n        }\n        <Link className=\"publication-card__link\" to={node.fields.slug} data-click-area>\n          <FormattedMessage id=\"common.more-details\" />\n        </Link>\n      </nav>\n      <aside\n        className={cn(\"publication-card__abstract\", { \"publication-card__abstract--visible\": isAbstractVisible })}\n        dangerouslySetInnerHTML={{ __html: node.html }}\n      />\n    </ClickableArea>\n  )\n}\n"],"sourceRoot":""}